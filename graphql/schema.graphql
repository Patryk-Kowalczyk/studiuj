"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    users: [User!]! @guard(with: ["api"]) @paginate(type: "paginator" model: "App\\Models\\User")
    user(uuid: String @eq): User @find
    me: User! @auth
    advertisements (category_id: Int @where(key: "category_id"),type: String @where(key: "type")): [Advertisement!]! @paginate(type: "paginator" model: "App\\Models\\Advertisement") @orderBy(column: "created_at", direction: "DESC")
    advertisement(id: Int! @eq): Advertisement @find

    categories: [Category!]! @all

    comments: [Comment!]! @all
    comments(id: Int! @eq): Comment @find

    OrdersAuth: [Order!]! @guard(with: ["api"])
    MeetsAuth: [Meet!]! @guard(with: ["api"])

    UserChats: [UserChat!] @guard(with: ["api"])
    ChatMessages(id: ID!): Chat! @guard(with: ["api"])
    LastUnseenMessages: LastUnseenMessages! @guard(with: ["api"])
}

type User {
    id: ID!
    uuid: String!
    name: String!
    email: String!
    avatar: String
    provider: String!
    created_at: DateTime!
    updated_at: DateTime!
    advertisements: [Advertisement!] @hasMany
    profile: Profile @hasOne
    provider: String!
    orders: [Order!]! @hasMany
}

type Profile{
    id: ID!
    type_of_education: String!
    user: User! @belongsTo
    universities: [UserUniversity] @hasMany
    schools: [UserSchool] @hasMany
}

type UserUniversity{
    id: ID!
    university_id: String
    name: String
    major: String!
    finished: Boolean!
}

type UserSchool{
    id: ID!
    name: String!
    major: String!
    finished: Boolean!
}

input UserSchoolInput{
    id: ID
    name: String!
    major: String!
    finished: Boolean!
}

type Category{
    id: ID!
    name: String!
    advertisements: [Advertisement!]! @hasMany
}

type Advertisement {
    id: ID!
    name: String!
    description: String!
    price: Float!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    category: Category! @belongsTo
    comments: [Comment!]! @hasMany
    commentsCount: Int! @count(relation: "comments")
    type: String!
    rating: Float
    orders: [Order!]! @hasMany
}

type Order {
    id: ID!
    advertisement: Advertisement! @belongsTo
    meets: [Meet!]! @hasMany
    user: User! @belongsTo
    status: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Meet {
    id: ID!
    order: Order! @belongsTo
    zoom_link: String!
}

type Comment {
    id: ID!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    advertisement: Advertisement! @belongsTo
    rating: Float
}

type Chat{
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    usersInChat: [UserInChat!]! @hasMany
    messages: [Message] @hasMany
}

type Message{
    id: ID!
    text: String!
    seen: Boolean!
    sender: User! @belongsTo
    receiver: User! @belongsTo
    chat: Chat! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

type LastUnseenMessages{
    messages: [Message!]
    unseenChatsCounter: Int!
}

type UserChat{
    userChat: UserInChat!
    sender: User!
    unseenMessagesCounter: Int!
    lastMessageDate: DateTime
}

type UserInChat{
    id: ID!
    chat: Chat! @belongsTo
    user: User! @belongsTo
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])

    #####################################

    CreateAdvertisement(name: String!, description: String! ,price: Int!,user_id: Int!,type: String!,  category_id:Int!): Advertisement! @create
    UpdateAdvertisement(id: ID!,name: String, description: String ,price: Int,user_id: Int,type: String, category_id:Int): Advertisement @update
    DeleteAdvertisement(id: ID!): Boolean @guard

    CreateComment(description: String!, user_id: Int!, advertisement_id:Int!,rating: Int): Comment! @guard
    DeleteComment(id: Int!): Boolean @guard
    UpdateComment(id: Int!, description: String, rating: Int): Boolean @guard

    ChangeUserPrimaryInfo(name: String!, email: String!, avatar: Upload @rules(apply: ["image", "mimes:jpeg,png,jpg,gif,svg", "max:512", "nullable"])): User! @guard
    CreateOrChangeProfile(type_of_education: String!): Profile! @guard

    AddSchool(name: String!, major: String!, finished: Boolean!): UserSchool! @guard
    DeleteSchool(id: ID!): UserSchool @delete
    EditSchool(id: ID!, name: String!, major: String!, finished: Boolean!): UserSchool @update

    AddUniversity(university_id: String, name: String, major: String!, finished: Boolean!): UserUniversity! @guard
    DeleteUniversity(id: ID!): UserUniversity @delete
    EditUniversity(id: ID!, university_id: String, name: String, major: String!, finished: Boolean!): UserUniversity @update

    CreateOrGetChat(id: ID!): Chat! @guard
    CreateMessage(sender_id: ID!, receiver_id: ID!, chat_id: ID!, text: String!): Message! @guard
    MarkMessagesAsSeen(chat_id: ID!): Boolean! @guard(with: ["api"])

    CreateMeet(order_id: ID!, zoom_link: String!): Meet @create

    CreateOrder(user_id: ID!, advertisement_id: ID!): Order @guard(with: ["api"])
    CreatePaymentIntent(order_id: ID!): String! @guard(with: ["api"])
}

